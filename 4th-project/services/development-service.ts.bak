import apiClient from './api-client';
import {
  DevelopmentRecord,
  CreateDevelopmentRecordRequest,
  UpdateDevelopmentRecordRequest,
  Milestone,
  ChildMilestone,
  CreateChildMilestoneRequest,
  DevelopmentStats,
  DevelopmentRecordsParams,
  MilestonesParams,
  ChildMilestonesParams,
  DevelopmentStatsParams,
  DevelopmentRecordsResponse,
  DevelopmentRecordResponse,
  MilestonesResponse,
  ChildMilestonesResponse,
  CreateChildMilestoneResponse,
  DevelopmentStatsResponse,
  DevelopmentArea,
  AgeGroup,
  RecordType,
  DEVELOPMENT_AREA_LABELS,
  AGE_GROUP_LABELS,
  RECORD_TYPE_LABELS
} from '../types/development';

/**
 * 발달 모니터링 관련 API 서비스
 */
export class DevelopmentService {
  private static readonly BASE_PATH = '/development';

  // ========== 발달 기록 관련 ==========

  /**
   * 발달 기록 목록 조회
   */
  static async getRecords(params: DevelopmentRecordsParams = {}): Promise<{
    results: DevelopmentRecord[];
    count: number;
    next?: string;
    previous?: string;
  }> {
    const queryParams = new URLSearchParams();
    
    if (params.page) queryParams.append('page', params.page.toString());
    if (params.limit) queryParams.append('page_size', params.limit.toString());
    if (params.childId) queryParams.append('child', params.childId);
    if (params.developmentArea) queryParams.append('development_area', params.developmentArea);
    if (params.ageGroup) queryParams.append('age_group', params.ageGroup);
    if (params.recordType) queryParams.append('record_type', params.recordType);

    const url = `${this.BASE_PATH}/records/${queryParams.toString() ? `?${queryParams.toString()}` : ''}`;
    return await apiClient.get<{
      results: DevelopmentRecord[];
      count: number;
      next?: string;
      previous?: string;
    }>(url);
  }

  /**
   * 발달 기록 상세 조회
   */
  static async getRecord(recordId: string): Promise<DevelopmentRecord> {
    return await apiClient.get<DevelopmentRecord>(
      `${this.BASE_PATH}/records/${recordId}/`
    );
  }

  /**
   * 발달 기록 생성
   */
  static async createRecord(recordData: CreateDevelopmentRecordRequest): Promise<DevelopmentRecord> {
    // 프론트엔드 필드명을 백엔드 필드명으로 변환
    const backendData = {
      child: recordData.childId,
      date: recordData.date,
      age_group: recordData.ageGroup,
      development_area: recordData.developmentArea,
      title: recordData.title,
      description: recordData.description,
      record_type: recordData.recordType,
      image_urls: recordData.images || []
    };
    return await apiClient.post<DevelopmentRecord>(
      `${this.BASE_PATH}/records/`,
      backendData
    );
  }

  /**
   * 발달 기록 수정
   */
  static async updateRecord(
    recordId: string,
    recordData: UpdateDevelopmentRecordRequest
  ): Promise<DevelopmentRecord> {
    // 프론트엔드 필드명을 백엔드 필드명으로 변환
    const backendData: any = {};
    if (recordData.date) backendData.date = recordData.date;
    if (recordData.ageGroup) backendData.age_group = recordData.ageGroup;
    if (recordData.developmentArea) backendData.development_area = recordData.developmentArea;
    if (recordData.title) backendData.title = recordData.title;
    if (recordData.description) backendData.description = recordData.description;
    if (recordData.recordType) backendData.record_type = recordData.recordType;
    if (recordData.images) backendData.image_urls = recordData.images;

    return await apiClient.put<DevelopmentRecord>(
      `${this.BASE_PATH}/records/${recordId}/`,
      backendData
    );
  }

  /**
   * 발달 기록 삭제
   */
  static async deleteRecord(recordId: string): Promise<{ success: boolean }> {
    await apiClient.delete(`${this.BASE_PATH}/records/${recordId}/`);
    return { success: true };
  }

  /**
   * 발달 기록 통계 조회
   */
  static async getRecordStats(): Promise<{
    total_records: number;
    records_by_area: Record<string, number>;
    records_by_type: Record<string, number>;
    records_by_age_group: Record<string, number>;
  }> {
    return await apiClient.get<{
      total_records: number;
      records_by_area: Record<string, number>;
      records_by_type: Record<string, number>;
      records_by_age_group: Record<string, number>;
    }>(`${this.BASE_PATH}/records/stats/`);
  }

  // ========== 발달 이정표 관련 ==========

  /**
   * 발달 이정표 목록 조회
   */
  static async getMilestones(params: MilestonesParams = {}): Promise<Milestone[]> {
    const queryParams = new URLSearchParams();
    
    if (params.ageGroup) queryParams.append('age_group', params.ageGroup);
    if (params.developmentArea) queryParams.append('development_area', params.developmentArea);

    const url = `${this.BASE_PATH}/milestones/${queryParams.toString() ? `?${queryParams.toString()}` : ''}`;
    const response = await apiClient.get<{ results: Milestone[] }>(url);
    return response.results || [];
  }

  /**
   * 자녀별 달성 이정표 조회
   */
  static async getChildMilestones(params: ChildMilestonesParams): Promise<ChildMilestone[]> {
    const queryParams = new URLSearchParams();
    queryParams.append('child', params.childId);

    const response = await apiClient.get<{ results: ChildMilestone[] }>(
      `${this.BASE_PATH}/child-milestones/?${queryParams.toString()}`
    );
    return response.results || [];
  }

  /**
   * 자녀 이정표 달성 기록
   */
  static async createChildMilestone(
    milestoneData: CreateChildMilestoneRequest
  ): Promise<ChildMilestone> {
    // 프론트엔드 필드명을 백엔드 필드명으로 변환
    const backendData = {
      child: milestoneData.childId,
      milestone_id: milestoneData.milestoneId,
      achieved_date: milestoneData.achievedDate,
      notes: milestoneData.notes
    };

    return await apiClient.post<ChildMilestone>(
      `${this.BASE_PATH}/child-milestones/`,
      backendData
    );
  }

  /**
   * 이정표 달성 진도 조회
   */
  static async getMilestoneProgress(childId?: string): Promise<{
    overall: {
      achieved: number;
      total: number;
      percentage: number;
    };
    by_area: Record<string, {
      achieved: number;
      total: number;
      percentage: number;
    }>;
  }> {
    const queryParams = new URLSearchParams();
    if (childId) queryParams.append('child_id', childId);

    return await apiClient.get<{
      overall: {
        achieved: number;
        total: number;
        percentage: number;
      };
      by_area: Record<string, {
        achieved: number;
        total: number;
        percentage: number;
      }>;
    }>(`${this.BASE_PATH}/child-milestones/progress/${queryParams.toString() ? `?${queryParams.toString()}` : ''}`);
  }

  // ========== 발달 정보 검색 관련 ==========

  /**
   * 발달 정보 검색
   */
  static async searchDevelopmentInfo(query: string): Promise<{
    query: string;
    count: number;
    results: Array<{
      content: string;
      metadata: Record<string, any>;
    }>;
  }> {
    const queryParams = new URLSearchParams();
    queryParams.append('query', query);

    return await apiClient.get<{
      query: string;
      count: number;
      results: Array<{
        content: string;
        metadata: Record<string, any>;
      }>;
    }>(`${this.BASE_PATH}/search/?${queryParams.toString()}`);
  }

  // ========== 통계 관련 ==========

  /**
   * 발달 통계 조회
   */
  static async getStats(params: DevelopmentStatsParams = {}): Promise<DevelopmentStats> {
    try {
      const recordStats = await this.getRecordStats();
      const milestoneProgress = params.childId 
        ? await this.getMilestoneProgress(params.childId)
        : await this.getMilestoneProgress();

      // 백엔드 데이터를 프론트엔드 형식으로 변환
      const stats: DevelopmentStats = {
        totalRecords: recordStats.total_records,
        recordsByArea: recordStats.records_by_area as Record<DevelopmentArea, number>,
        recordsByType: recordStats.records_by_type as Record<RecordType, number>,
        recentActivity: {
          recordsThisWeek: 0, // 추후 백엔드에서 구현 필요
          recordsThisMonth: 0, // 추후 백엔드에서 구현 필요
        },
        milestoneProgress: {
          achieved: milestoneProgress.overall.achieved,
          total: milestoneProgress.overall.total,
          percentage: milestoneProgress.overall.percentage,
        },
      };

      return stats;
    } catch (error) {
      console.error('Error getting development stats:', error);
      throw new Error('Failed to get development stats');
    }
  }

  // ========== 헬퍼 함수들 ==========

  /**
   * 발달 영역 한글 라벨 가져오기
   */
  static getDevelopmentAreaLabel(area: DevelopmentArea): string {
    return DEVELOPMENT_AREA_LABELS[area];
  }

  /**
   * 연령 그룹 한글 라벨 가져오기
   */
  static getAgeGroupLabel(ageGroup: AgeGroup): string {
    return AGE_GROUP_LABELS[ageGroup];
  }

  /**
   * 기록 유형 한글 라벨 가져오기
   */
  static getRecordTypeLabel(recordType: RecordType): string {
    return RECORD_TYPE_LABELS[recordType];
  }

  /**
   * 생년월일을 기준으로 현재 연령 그룹 계산
   */
  static calculateCurrentAgeGroup(birthDate: string): AgeGroup | null {
    const birth = new Date(birthDate);
    const now = new Date();
    
    if (isNaN(birth.getTime())) {
      return null;
    }

    const ageMonths = this.calculateAgeInMonths(birthDate);
    
    if (ageMonths < 3) return '0-3months';
    if (ageMonths < 6) return '3-6months';
    if (ageMonths < 9) return '6-9months';
    if (ageMonths < 12) return '9-12months';
    if (ageMonths < 18) return '12-18months';
    if (ageMonths < 24) return '18-24months';
    if (ageMonths < 36) return '24-36months';
    
    return '24-36months'; // 36개월 이상도 마지막 그룹으로 처리
  }

  /**
   * 생년월일을 기준으로 개월수 계산
   */
  static calculateAgeInMonths(birthDate: string): number {
    const birth = new Date(birthDate);
    const now = new Date();
    
    const yearDiff = now.getFullYear() - birth.getFullYear();
    const monthDiff = now.getMonth() - birth.getMonth();
    
    return yearDiff * 12 + monthDiff;
  }

  /**
   * 발달 기록 제목 유효성 검사
   */
  static validateRecordTitle(title: string): boolean {
    return title.trim().length >= 1 && title.trim().length <= 100;
  }

  /**
   * 발달 기록 설명 유효성 검사
   */
  static validateRecordDescription(description: string): boolean {
    return description.trim().length >= 1 && description.trim().length <= 1000;
  }

  /**
   * 발달 기록을 연령 그룹별로 그룹화
   */
  static groupRecordsByAgeGroup(records: DevelopmentRecord[]): Record<AgeGroup, DevelopmentRecord[]> {
    const grouped = {} as Record<AgeGroup, DevelopmentRecord[]>;
    
    // 모든 연령 그룹 초기화
    Object.keys(AGE_GROUP_LABELS).forEach(ageGroup => {
      grouped[ageGroup as AgeGroup] = [];
    });

    records.forEach(record => {
      if (grouped[record.ageGroup]) {
        grouped[record.ageGroup].push(record);
      }
    });

    return grouped;
  }

  /**
   * 발달 기록을 발달 영역별로 그룹화
   */
  static groupRecordsByDevelopmentArea(records: DevelopmentRecord[]): Record<DevelopmentArea, DevelopmentRecord[]> {
    const grouped = {} as Record<DevelopmentArea, DevelopmentRecord[]>;
    
    // 모든 발달 영역 초기화
    Object.keys(DEVELOPMENT_AREA_LABELS).forEach(area => {
      grouped[area as DevelopmentArea] = [];
    });

    records.forEach(record => {
      if (grouped[record.developmentArea]) {
        grouped[record.developmentArea].push(record);
      }
    });

    return grouped;
  }

  /**
   * 타임라인용 발달 기록 정렬 (날짜순)
   */
  static sortRecordsForTimeline(records: DevelopmentRecord[]): DevelopmentRecord[] {
    return [...records].sort((a, b) => {
      return new Date(b.date).getTime() - new Date(a.date).getTime();
    });
  }
}

export default DevelopmentService;
